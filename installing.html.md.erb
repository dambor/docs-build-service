---
title: Installing and Configuring Build Service
owner: Build Service Team
---


This topic describes how to install and configure Pivotal Build Service.


## <a id='overview'></a> Overview

To install Build Service, you must configure UAA, credentials, and TLS certificates, and you must relocate images to an internal image registry. You can also define optional parameters and annotations during installation.

The procedures in this topic describe how to do a standard Build Service installation or a kpack-only installation .

For kpack-only installation follow [this page](./installing-kpack-only.html#overview)


## <a id='prerequisites'></a> Prerequisites

Before you install Build Service, you must do the following:

- Install Pivotal Container Service (PKS). See [Installing Enterprise PKS](https://docs.pivotal.io/pks/1-5/installing.html).

- Install Ruby. Ruby is required to create a UAA client.

- Install an ingress controller on the Kubernetes cluster where you install Build Service. The Build Service expects an ingress controller and an ingress service to configure its own ingress. See [How to set up an Ingress Controller for a PKS cluster](https://community.pivotal.io/s/article/how-to-set-up-an-ingress-controller-for-a-pks-cluster).

- Install the Kubernetes command-line tool, kubectl. See [Install and Set Up Kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/).
  <p class='note'><strong>Note:</strong> Kubectl is only required if you do not have an ingress controller installed locally.</p>

- Configure `PersistentVolumes` on the Kubernetes cluster where you install Build Service. Configure the cache size per image to 2&nbsp;GB. Build Service requires `PersistentVolumeClaims` to cache build artifacts, which reduces the time of subsequent builds. For more information, see [Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) in the Kubernetes documentation.

- Download the Duffle executable for your operating system from PivNet. See [Pivotal Build Service](https://network.pivotal.io/products/build-service/). 

- Download the Build Service Bundle from PivNet. See [Pivotal Build Service](https://network.pivotal.io/products/build-service/). 


## <a id='configure'></a> Configure Build Service

The procedures in this section describe how to configure Build Service to prepare for installation.

### <a id='retrieve-credentials'></a> Retrieve PKS Cluster Credentials

This procedure retrieves the credentials that authenticate communication between kubectl and the PKS cluster where Build Service runs.

To retrieve the PKS cluster credentials:

1. Run the following command:

    ```
    pks get-credentials CLUSTER-NAME
    ```
    Where `CLUSTER-NAME` is the name of the PKS cluster where Build Service runs.

1. Target the PKS cluster by running:

    ```
    kubectl config use-context CLUSTER-NAME
    ```
    Where `CLUSTER-NAME` is the name of the PKS cluster where Build Service runs.

### <a id='uaa-client-creation'></a> Install a UAA Client

UAA authenticates Build Service users. To allow Build Service to interact with UAA, you must install and configure a UAA client.

To install a UAA client for Build Service:

1. Install the `uaac` client by running:

    ```
    gem install cf-uaac
    ```
    <p class="note"><strong>Note</strong>: If you are not using <code>rbenv</code> or <code>rvm</code>, you may need to run <code>sudo gem install cf-uaac</code> to install <code>uaac</code>.</p>

1. Target the UAA that you use to authenticate Build Service users by running:

    ```
    uaac target UAA-URL
    ```
    Where `UAA-URL` is the URL for the UAA that is used to authenticate users for Build Service.

    <p class="note"><strong>Note:</strong> If the UAA uses a self-signed certificate, add the <code>--skip-ssl-validation</code> flag to the command.</p>

1. In Ops Manager, go to the **UAA credentials** section. Record the password for the admin user. 

1. Login as the admin user with the password you recorded in the previous step by running:

    ```
    uaac token client get admin -s ADMIN-PASSWORD
    ```
    Where `ADMIN-PASSWORD` is the password for the UAA admin user. 

1. Associate the UAA client with Build Service:
    <p class="note warning"><strong>Warning:</strong> Run the following command exactly as it appears below. The <code>--secret</code> property must be an empty string.</p>

    ```
    uaac client add pivotal_build_service_cli --secret="" --authorized_grant_types="password"
    uaac client update pivotal_build_service_cli --scope="openid,scim.read" --authorized_grant_types="password,refresh_token,client_credentials" --authorities="scim.read" --access_token_validity 600 --refresh_token_validity 21600
    ```

### <a id='configure-tls'></a> Configure TLS Certificate

You must create a TLS certificate for the Build Service domain or use an existing certificate. This certificate may be self-signed. 

To configure a TLS certificate for Build Service:

1. Create or use an existing TLS certificate for the Build Service domain.
  <p class="note"><strong>Note:</strong> If you use a self-signed certificate, add the <code>--skip-ssl-validation</code> flag.</p>

1. If you use Mac OS, add the CA certificate for the TLS certificate to the keychain. Update the trust settings from `Use System Defaults` to `Always Trust` with the `pb` CLI.

1. Record the local paths to the `.crt` and `.key` files for the TLS certificate.

### <a id='create-creds-file'></a> Create a Credentials File

Create a credentials file to provide the location of the TLS certificate credentials to `duffle` during Build Service installation.

To create a credentials file:

1. Navigate to the `/tmp` folder and create a file named `credentials.yml`.

1. Add the properties shown in the following example file to the `credentials.yml` file:

    ```
    name: build-service-credentials
    credentials:
     - name: kube_config
       source:
         path: "PATH-TO-KUBECONFIG"
       destination:
         path: "/root/.kube/config"
     - name: ca_cert
       source:
         path: "PATH-TO-CA"
       destination:
         path: "/cnab/app/cert/ca.crt"
     - name: tls_cert
       source:
         path: "PATH-TO-TLS-CERTIFICATE"
       destination:
         path: "/cnab/app/cert/tls.crt"
     - name: tls_key
       source:
         path: "PATH-TO-TLS-PRIVATE-KEY"
       destination:
         path: "/cnab/app/cert/tls.key"
    ```
    Where:
      - `PATH-TO-KUBECONFIG` is the path to the kubeconfig configuration file on your local machine. This file is required to enable Build Service to interact with the target cluster.
      - `PATH-TO-CA` is the path to the Certificate Authority (CA). This CA is  required to enable Build Service to interact with internally deployed registries. This is the CA that was used while deploying the registry.
      - `PATH-TO-TLS-CERTIFICATE` is the path to the TLS certificate. This TLS certificate required for authenticated communication between the `pb` CLI and Build Service. The CA for this TLS certificate must be trusted by the workstation communicating with Build Service.
      - `PATH-TO-TLS-PRIVATE-KEY` is the path to the private key corresponding to the TLS certificate.

      <p class="note"><strong>Note:</strong> All local paths in the credentials file must be absolute.</p>

### <a id='create-params-file'></a> (Optional) Define Custom Parameters and Annotations

To define custom parameters and annotations for Build Service, create a JSON file that defines the parameters.

<p class="note"><strong>Note:</strong> If you create the parameters file you can provide it to the duffle install command using `-p` instead of all the `--set` options depicted in [the installation step](#kpack-only)</p>

To define custom parameters and annotations for Build Service:

1. Navigate to the `/tmp` folder and create a file named `parameters.json`.

1. Add any of the following optional properties to the `/tmp/parameters.json` file:
    - `disable_builder_polling`: If set to `true`, this property prevents Build Service from polling Builder images for buildpack updates. By default, this property is `false`.
    If you set `disable_builder_polling` to true, you must configure a Builder Webhook. For more information, see [Setting up Builder Webhooks](./webhooks.html).
    - `ingress_annotations`: Configures ingress annotations.
    - `replica_count`: Defines the number of Build Service instances running. By default, `replica_count` is `1`.
    - `no_gateway`: Installs the Pivotal Builder and kpack, the Build Service CRDs, and controllers. This is a boolean value that defaults to `false`.
    - `http_proxy`: The http proxy to be used for network traffic.
    - `https_proxy`: The https proxy to be used for network traffic.
    - `no_proxy`: A comma separated list of host names that should not use a proxy.

    <p class="note warning"><strong>Warning:</strong> If you set <code>no_gateway</code> to <code>true</code>, you can only interact with Build Service through <code>kubectl</code>. For more information, see <a href="#kpack-only">(Optional) Install Build Service as a kpack-Only Installation</a>.</p>
    
    **Sample parameters.json**
    ```
    {
      "ingress_annotations": {
        "kubernetes.io/ingress.YOUR-ANNOTATION-KEY": "YOUR-ANNOTATION-VALUE"
      }
    }
    ```

### <a id='relocate-images'></a> Move Images to an Image Registry

This procedure relocates images from the Build Service bundle that you downloaded from PivNet to an internal image registry.

To move the images from the Build Service bundle to an internal image registry:

1. Log in to the image registry where the images are stored by running:

    ```
    docker login YOUR-IMAGE-REGISTRY
    ```
    Where `YOUR-IMAGE-REGISTRY` is the name of the image registry where you push the images. 

1. Push the images to the image registry by running:

    ```
    duffle relocate -f /tmp/build-service-${version}.tgz -m /tmp/relocated.json -p YOUR-IMAGE-REGISTRY
    ```

<p class="note"><strong>Note:</strong> If you're using Harbor, make sure you have a project called <code>foo</code> before running the <code>duffle</code> command.</p>

## <a id='install'></a> Install Build Service

The following procedures describe how to use `duffle` to define the required Build Service parameters and install build service. 

### <a id='standard-install'></a> Install Build Service

The following procedure describes how to do a standard Build Service installation. To install Build Service so that all interactions with Build Service must be made through kubectl, see [Install Build Service as a kpack-Only Installation](#kubectl).

1. Use `duffle` to install Build Service and define the required Build Service parameters by running:

    ```
    duffle install BUILD-SERVICE-INSTALLATION-NAME -c /tmp/credentials.yml  \
        --set domain=BUILD-SERVICE-DOMAIN \
        --set kubernetes_env=PKS-CLUSTER-NAME \
        --set docker_registry=IMAGE-REGISTRY \
        --set registry_username="REGISTRY-USERNAME" \
        --set registry_password="REGISTRY-PASSWORD" \
        --set uaa_url=UAA-URL \
        -f /tmp/build-service-${version}.tgz \
        -m /tmp/relocated.json
    ```
    Where:
    - `BUILD-SERVICE-DOMAIN` is the domain name  used to target Build Service. You configured this domain as the domain for the Ingress controller.
    - `PKS-CLUSTER-NAME` is the name of the PKS cluster where Build Service is installed.
    - `IMAGE-REGISTRY` is the domain of the image registry that you configured.
      <p class="note"><strong>Note:</strong> For dockerhub, the domain must be <code>index.docker.io</code>.
      Do not include subpaths in the registry. <code>gcr.io</code> and <code>acr.io</code> are examples of valid fields for the registry.</p>
    - `REGISTRY-USERNAME` is the username to access the registry. `gcr.io` expects `_json_key` as the username when using the `JSON Key File` auth.
    - `REGISTRY-PASSWORD` is the password to access the registry.  
    - `UAA-URL` is the URL to access UAA.

## <a id='users-create'></a> Create a UAA User for Build Service

To access Build Service, configure one or more users on UAA using `uaac`.

To create a UAA user for Build Service:

1. Install `uaac`. See [Install a UAA Client](#uaa-client-creation).

1. Target the UAA that you use to authenticate Build Service users by running:

    ```
    uaac target UAA-URL --skip-ssl-validation
    ```
    Where `UAA-URL` is the URL of the UAA that authenticates Build Service users. 

1. Create a user by running:

    ```
    uaac user add USER-USERNAME -p USER-PASSWORD --emails USER-EMAIL
    ```
    Where:
      - `USER-USERNAME` is a username for the new user.
      - `USER-PASSWORD` is a password for the new user. 
      - `USER-EMAIL` is the email address of the new user. 


## <a id='verify-installation'></a> Verify Installation 

Verify Build Service installation by logging in to Build Service with the UAA user credentials you created. 

<p class="note"><strong>Note:</strong> This procedure does not apply to kpack-only Build Service installations where the <code>no_gateway</code> parameter in the <code>parameters.json</code> file is set to <code>true</code>. This procedure applies only to standard Build Service installations.</p>

To verify Build Service installation:

1. Download the `pb` binary from PivNet. See [Pivotal Build Service](https://network.pivotal.io/products/build-service/). 

1. Target the Build Service installation by running:

    ```
    pb api set BUILD_SERVICE_DOMAIN
    ```
    Where `BUILD_SERVICE_DOMAIN` is the domain for your Build Service installation. 

    <p class="note"><strong>Note:</strong> If the UAA for Build Service uses a self-signed CA certificate, add the `--skip-ssl-validation` flag at the end of the command.</p>

1. Log in to Build Service with the user that you created as part of [Create a UAA User for Build Service](#users-create) by running:

    ```
    pb login
    ```


## <a id='remove-tls'></a> (Optional) Remove TLS Certificate

After you verify Build Service installation, you can optionally delete the `.crt` and `.key` files for the TLS certificate that you created in [Create TLS Certificate](#configure-tls).
